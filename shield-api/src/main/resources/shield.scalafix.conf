# Copyright: 2018 Sam Halliday
# License: https://www.apache.org/licenses/LICENSE-2.0

# This file enforces the scalazzi safe subset of scala.
#
# For further information, see https://github.com/scalaz/scalazzi

Disable.symbols = [
  {
    symbol = "scala/Enumeration"
    message = "prefer a sealed abstract class"
  }

  {
    regex = {
      includes = [
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
        "^\\Qscala/util/Try#get().\\E$"
        "^\\Qscala/Option#get().\\E$"
        "^\\Qscala/collection/IterableLike#head().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.ifSynthetic = [
  "java/io/Serializable"
  "scala/Any"
  "scala/Product"

  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"

  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.unlessInside = [
  {
    safeBlocks = [
      "fommil/std/IO"
      "scalaz/ioeffect/IO"
      "scalaz/ioeffect/Task"
      "scalaz/ApplicativeError.handleError"
      "scalaz/ApplicativeError.raiseError"
      "scalaz/syntax/ApplicativeErrorOps.handleError"
      "scalaz/syntax/ApplicativeErrorOps.recover"
      "scalaz/syntax/MonadErrorOps.emap"
      "scalaz/zio/IO"
      "scalaz/zio/Task"
      "scalaz/zio/UIO"
      "scalaz/zio/ZIO"
      "scalaz/zio/ZIO_E_Throwable.effect"
      "scalaz/zio/ZIOFunctions.effectAsync"
      "scalaz/zio/ZIOFunctions.effectTotal"
      "scalaz/zio/ZIOFunctions.effectTotalWith"
      "scalaz/zio/ZIOFunctions.fail"
      "scalaz/zio/ZIOFunctions.halt"
    ]
    symbols = [
      {
        regex = {
          includes = [
            "^\\Qjava/\\E.*$"
          ]
          excludes = [
            "^fommil.*$"
            "^scalaz.*$"
            "^\\Qjava/lang/String#\\E.*$"
            "^\\Qjava/time/Instant#\\E.*$"
            "^\\Qjava/time/ZonedDateTime#\\E.*$"
            "^\\Qjava/time/temporal/ChronoUnit#\\E.*$"
            "^\\Qjava/net/URI#\\E.*$"
            "^\\Qjava/net/URLEncoder#\\E.*$"
            "^\\Qjava/net/URLDecoder#\\E.*$"
            "^\\Qjava/\\E$"
            "^\\Qjava/lang/\\E$"
            "^\\Qjava/time/\\E$"
            "^\\Qjava/net\\E$"
          ]
        }
        message = "Untrusted third party library must be called from IO, or blessed in scalafix.conf"
      }
    ]
  }
  {
    safeBlocks = [
      "scalaz/`\/`.fromTryCatchNonFatal",
      "scalaz/`\/`.fromTryCatchThrowable",
      "scalaz/Maybe.attempt",
      "scalaz/Maybe.fromTryCatchNonFatal",
      "scalaz/Maybe.fromTryCatchThrowable"
    ]
    symbols = [
      {
        regex = {
          includes = [
            # should live in a common file so we don't need to duplicate
            "^\\Qjava/net/URLEncoder#\\E.*$"
            "^\\Qjava/net/URLDecoder#\\E.*$"
          ]
          excludes = [
          ]
        }
        message = "Deterministic method is not total, must be called via Maybe.attempt, \/.fromTryCatchNonFatal, etc."
      }
    ]
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = true
  noDefaultArgs = true
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}

ExplicitResultTypes {
  unsafeShortenNames = true

  fatalWarnings = true

  # these apply to non-implicits
  memberKind = [Def, Val]
  memberVisibility = [Public, Protected]

  # turn to the max...
  skipSimpleDefinitions = false
  skipLocalImplicits = false
}